{
    "collab_server" : "",
    "contents" : "#' Title\n#'\n#' @param x\n#' @param scale\n#'\n#' @export\n#'\n#' @examples\n#' # Simulate a pareto sample\n#' n <- 1e3 ; scale = 1/2 ; shape = 3\n#' set.seed(100) ; X <- sort(rpareto(n, scale, shape))\n#'\n#' # Compare the ECDF with the theoritical CDF\n#' plot(X,ecdf(X)(X), type = \"l\")\n#' lines(X,ppareto(X, scale, shape), col = \"red\")\nrpareto  <- function(n,scale=1,shape=1)\n{\n  U <- runif(n)\n  output <- qpareto(U, scale, shape)\n  return(output)\n}\n#' Title\n#'\n#' @param shape\n#'\n#' @return\n#' @export\n#'\n#' @examples\n#'\n#' x <- seq(-3,15, length = 100)\n#' plot(x,ppareto(x), type =\"l\")\nppareto  <- function(x,scale=1,shape=1)\n{\n  p <- rep(NA,length(x))\n  p[x < scale] <- 0\n\n  xs <- x[x >= scale]\n  p[x >= scale]  <- 1 - (xs/scale)^(-shape)\n\n  output <- p\n\n  return(output)\n}\n\n#' Title\n#'\n#' @param x\n#' @param scale\n#' @param shape\n#'\n#' @return\n#' @export\n#'\n#' @examples\n#' d <- 1:4\n#' x <- seq(-3,15, length = 100)\n#'\n#' # Compute the firts 4 derivatives\n#' dataPlot <- NULL\n#' for (D in d)\n#' dataPlot <- rbind(dataPlot, data.frame(d = as.factor(D), x = x, value = (Dpareto(x,D))))\n#'\n#' # Plot the derivatives\n#' library(ggplot2)\n#' ggplot(dataPlot, aes(x = x, y = value, color = d)) + geom_line()\n\nDpareto  = function(x,d,scale=1,shape=1)\n{\n  derivative <- rep(NA,length(x))\n  derivative[x < scale] <- 0\n  xs <- x[x >= scale]\n  derivative[x >= scale] <- -(-1/scale)^(d)*(xs/scale)^(-shape-d)*prod(shape + 0:(d-1))\n\n  output <- derivative\n  return(output)\n}\n\n\n#' Title\n#'\n#' @param p\n#' @param scale\n#' @param shape\n#'\n#' @return\n#' @export\n#'\n#' @examples\n#' x <- seq(1,15, length = 100)\n#' p <- ppareto(x)\n#' q <- qpareto(p)\n#' hist(x-q)\n\nqpareto <- function(p,scale=1,shape=1)\n{\n  q = rep(NA,length(p))\n\n  q[p==1] <- Inf\n  q[p==0] <- scale\n  q[0<p & p<1] <- scale*(1-p[0<p & p<1])^(-1/shape)\n\n  output <- q\n\n  return(output)\n}\n\n\n#' Title\n#'\n#' @param a\n#' @param m\n#' @param scale\n#' @param shape\n#'\n#' @return\n#' @export\n#'\n#' @examples\nUpperTruncMomPareto = function(a,m,scale=1,shape = 1) #E[X^mI(x>a)]\n{\n  uppMoments = rep(NA,length(m))\n\n  # Case when the order is larger or equal than the shape\n  uppMoments[(m >= shape)] = Inf\n\n  # Case when the order is strictly smaller than the shape\n  ind = which(m < shape)\n  uppMoments[ind]  = shape*scale^shape/(shape-m[ind])*max(a,scale)^(m[ind]-shape)\n\n  output = uppMoments\n  return(output)\n}\n\n",
    "created" : 1475186712239.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "846825882",
    "id" : "14B7AFF8",
    "lastKnownWriteTime" : 1475501590,
    "last_content_update" : 1475501590549,
    "path" : "/src/BU/MyPackages/DistributionPty/R/Pareto.R",
    "project_path" : "R/Pareto.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}